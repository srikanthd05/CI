/*
* Copyright © 2010 - 2013 Apama Ltd.
* Copyright © 2013 - 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.                                                            
*
*/
def isDeployablePackages="${ISPACKAGES.replaceAll(",",":")}"
def bpmDeployableProjects="${BPMPROJECTS.replaceAll(",",":")}"
def rulesDeployableProjects="${RULEPROJECTS.replaceAll(",",":")}"
def isISCluster=false
def isBPMCluster=false
def isRuleCluster=false
def isServers=0
def bpmServers=0
def ruleServers=0
def tempTarget

node ('master'){
   if ("${IS_TARGET_TYPE}" == 'Clusters') {
       isISCluster=true
       clusters = Arrays.asList("${IS_TARGET_SERVER}".split(','))
       props = readProperties file: '${env.SAG_CI_HOME}/System.properties'
       clusters.each{
         if("${isServers}" == '0'){
	   isServers = props["${it}"]
	 } else {
	     tempTarget = props["${it}"]
	     isServers = "${isServers}-${tempTarget}"
	 } 
	 
       } 
   } else {
         isServers="${IS_TARGET_SERVER}"
       }
   
   if ("${BPM_TARGET_TYPE}" == 'Clusters') {
       isBPMCluster=true
       clusters = Arrays.asList("${BPM_TARGET_SERVER}".split(','))
       props = readProperties file: '${env.SAG_CI_HOME}/System.properties'
       clusters.each{
         if("${bpmServers}" == '0'){
	   bpmServers = props["${it}"]
	 } else {
	     tempTarget = props["${it}"]
	     bpmServers = "${bpmServers}-${tempTarget}"
	 }
       } 
   } else {
          bpmServers="${BPM_TARGET_SERVER}"
       }
   
   if ("${RULE_TARGET_TYPE}" == 'Clusters') {
       isRuleCluster=true
       clusters = Arrays.asList("${RULE_TARGET_SERVER}".split(','))
       props = readProperties file: '${env.SAG_CI_HOME}/System.properties'
       clusters.each{
         if("${bpmServers}" == '0'){
	   ruleServers = props["${it}"]
	 } else {
	     tempTarget = props["${it}"]
	     ruleServers = "${ruleServers}-${tempTarget}"
	 }
       } 
   } else {
          ruleServers="${RULE_TARGET_SERVER}"
       }
}
isServers = isServers.replaceAll(",",":")
bpmServers = bpmServers.replaceAll(",",":")
ruleServers = ruleServers.replaceAll(",",":")
pipeline {
    agent any 

    stages {
        stage('Build'){
            steps {
                bat "${env.SAG_HOME}/common/lib/ant/bin/ant -DisDeployablePackages=${isDeployablePackages} -DbpmDeployableProjects=${bpmDeployableProjects} -DrulesDeployableProjects=${rulesDeployableProjects} -DSAGHome=${env.SAG_HOME} -DSAG_CI_HOME=${env.SAG_CI_HOME} -DprojectName=${env.JOB_NAME} build"
            }
        }
	
	 stage('ZIP') {
   steps {
    bat "del uat.zip"
    zip archive: true, dir: './target/copy/build', glob: '', zipFile: "uat.zip"
   }
  }
        stage('Deploy') {
            steps {
		bat "${env.SAG_HOME}/common/lib/ant/bin/ant -DisISCluster=${isISCluster} -DisBPMCluster=${isBPMCluster} -DisRuleCluster=${isRuleCluster} -DSAGHome=${env.SAG_HOME} -DisServer=${isServers} -DbpmServers=${bpmServers} -DruleServers=${ruleServers} -DSAG_CI_HOME=${env.SAG_CI_HOME} -DprojectName=${env.JOB_NAME} deploy"
            }
        }
 	stage('Test') {
            steps {
		bat "${env.SAG_HOME}/common/lib/ant/bin/ant -DSAGHome=${env.SAG_HOME} -DSAG_CI_HOME=${env.SAG_CI_HOME} -DprojectName=${env.JOB_NAME} test"
		junit 'report/'
            }
        }
    }
}
